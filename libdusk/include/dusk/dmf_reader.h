#ifndef DMF_READER_H
#define DMF_READER_H

/* Generated by flatcc 0.4.1 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef alignas
#include <stdalign.h>
#endif
#define PDIAGNOSTIC_IGNORE_UNUSED
#include "flatcc/portable/pdiagnostic_push.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

typedef struct dmf_Vec2 dmf_Vec2_t;
typedef const dmf_Vec2_t *dmf_Vec2_struct_t;
typedef dmf_Vec2_t *dmf_Vec2_mutable_struct_t;
typedef const dmf_Vec2_t *dmf_Vec2_vec_t;
typedef dmf_Vec2_t *dmf_Vec2_mutable_vec_t;
typedef struct dmf_Vec3 dmf_Vec3_t;
typedef const dmf_Vec3_t *dmf_Vec3_struct_t;
typedef dmf_Vec3_t *dmf_Vec3_mutable_struct_t;
typedef const dmf_Vec3_t *dmf_Vec3_vec_t;
typedef dmf_Vec3_t *dmf_Vec3_mutable_vec_t;
typedef struct dmf_Color dmf_Color_t;
typedef const dmf_Color_t *dmf_Color_struct_t;
typedef dmf_Color_t *dmf_Color_mutable_struct_t;
typedef const dmf_Color_t *dmf_Color_vec_t;
typedef dmf_Color_t *dmf_Color_mutable_vec_t;

typedef const struct dmf_Material_table *dmf_Material_table_t;
typedef const flatbuffers_uoffset_t *dmf_Material_vec_t;
typedef flatbuffers_uoffset_t *dmf_Material_mutable_vec_t;
typedef const struct dmf_Shape_table *dmf_Shape_table_t;
typedef const flatbuffers_uoffset_t *dmf_Shape_vec_t;
typedef flatbuffers_uoffset_t *dmf_Shape_mutable_vec_t;
typedef const struct dmf_Model_table *dmf_Model_table_t;
typedef const flatbuffers_uoffset_t *dmf_Model_vec_t;
typedef flatbuffers_uoffset_t *dmf_Model_mutable_vec_t;


struct dmf_Vec2 {
    alignas(4) float x;
    alignas(4) float y;
};
static_assert(sizeof(dmf_Vec2_t) == 8, "struct size mismatch");

static inline const dmf_Vec2_t *dmf_Vec2__const_ptr_add(const dmf_Vec2_t *p, size_t i) { return p + i; }
static inline dmf_Vec2_t *dmf_Vec2__ptr_add(dmf_Vec2_t *p, size_t i) { return p + i; }
static inline dmf_Vec2_struct_t dmf_Vec2_vec_at(dmf_Vec2_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t dmf_Vec2__size() { return 8; }
#ifndef dmf_Vec2_identifier
#define dmf_Vec2_identifier flatbuffers_identifier
#endif
#define dmf_Vec2_type_hash ((flatbuffers_thash_t)0xf8cd536a)
#define dmf_Vec2_type_identifier "\x6a\x53\xcd\xf8"
static inline size_t dmf_Vec2_vec_len(dmf_Vec2_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(dmf_Vec2)

__flatbuffers_define_struct_scalar_field(dmf_Vec2, x, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(dmf_Vec2, y, flatbuffers_float, float)

struct dmf_Vec3 {
    alignas(4) float x;
    alignas(4) float y;
    alignas(4) float z;
};
static_assert(sizeof(dmf_Vec3_t) == 12, "struct size mismatch");

static inline const dmf_Vec3_t *dmf_Vec3__const_ptr_add(const dmf_Vec3_t *p, size_t i) { return p + i; }
static inline dmf_Vec3_t *dmf_Vec3__ptr_add(dmf_Vec3_t *p, size_t i) { return p + i; }
static inline dmf_Vec3_struct_t dmf_Vec3_vec_at(dmf_Vec3_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t dmf_Vec3__size() { return 12; }
#ifndef dmf_Vec3_identifier
#define dmf_Vec3_identifier flatbuffers_identifier
#endif
#define dmf_Vec3_type_hash ((flatbuffers_thash_t)0xf9cd54fd)
#define dmf_Vec3_type_identifier "\xfd\x54\xcd\xf9"
static inline size_t dmf_Vec3_vec_len(dmf_Vec3_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(dmf_Vec3)

__flatbuffers_define_struct_scalar_field(dmf_Vec3, x, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(dmf_Vec3, y, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(dmf_Vec3, z, flatbuffers_float, float)

struct dmf_Color {
    alignas(4) float r;
    alignas(4) float g;
    alignas(4) float b;
};
static_assert(sizeof(dmf_Color_t) == 12, "struct size mismatch");

static inline const dmf_Color_t *dmf_Color__const_ptr_add(const dmf_Color_t *p, size_t i) { return p + i; }
static inline dmf_Color_t *dmf_Color__ptr_add(dmf_Color_t *p, size_t i) { return p + i; }
static inline dmf_Color_struct_t dmf_Color_vec_at(dmf_Color_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t dmf_Color__size() { return 12; }
#ifndef dmf_Color_identifier
#define dmf_Color_identifier flatbuffers_identifier
#endif
#define dmf_Color_type_hash ((flatbuffers_thash_t)0x50321291)
#define dmf_Color_type_identifier "\x91\x12\x32\x50"
static inline size_t dmf_Color_vec_len(dmf_Color_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(dmf_Color)

__flatbuffers_define_struct_scalar_field(dmf_Color, r, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(dmf_Color, g, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(dmf_Color, b, flatbuffers_float, float)


struct dmf_Material_table { uint8_t unused__; };

#ifndef dmf_Material_identifier
#define dmf_Material_identifier flatbuffers_identifier
#endif
#define dmf_Material_type_hash ((flatbuffers_thash_t)0x41c595f3)
#define dmf_Material_type_identifier "\xf3\x95\xc5\x41"
static inline size_t dmf_Material_vec_len(dmf_Material_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dmf_Material_table_t dmf_Material_vec_at(dmf_Material_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dmf_Material_table_t, vec, i, 0)
__flatbuffers_table_as_root(dmf_Material)

__flatbuffers_define_string_field(0, dmf_Material, name, 0)
__flatbuffers_define_struct_field(1, dmf_Material, ambient, dmf_Color_struct_t, 0)
__flatbuffers_define_struct_field(2, dmf_Material, diffuse, dmf_Color_struct_t, 0)
__flatbuffers_define_struct_field(3, dmf_Material, specular, dmf_Color_struct_t, 0)
__flatbuffers_define_scalar_field(4, dmf_Material, shininess, flatbuffers_float, float, 0.000000f)
__flatbuffers_define_scalar_field(5, dmf_Material, dissolve, flatbuffers_float, float, 0.000000f)
__flatbuffers_define_string_field(6, dmf_Material, ambient_map, 0)
__flatbuffers_define_string_field(7, dmf_Material, diffuse_map, 0)
__flatbuffers_define_string_field(8, dmf_Material, specular_map, 0)
__flatbuffers_define_string_field(9, dmf_Material, bump_map, 0)

struct dmf_Shape_table { uint8_t unused__; };

#ifndef dmf_Shape_identifier
#define dmf_Shape_identifier flatbuffers_identifier
#endif
#define dmf_Shape_type_hash ((flatbuffers_thash_t)0xd49d2b4b)
#define dmf_Shape_type_identifier "\x4b\x2b\x9d\xd4"
static inline size_t dmf_Shape_vec_len(dmf_Shape_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dmf_Shape_table_t dmf_Shape_vec_at(dmf_Shape_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dmf_Shape_table_t, vec, i, 0)
__flatbuffers_table_as_root(dmf_Shape)

__flatbuffers_define_string_field(0, dmf_Shape, name, 0)
__flatbuffers_define_table_field(1, dmf_Shape, material, dmf_Material_table_t, 0)
__flatbuffers_define_vector_field(2, dmf_Shape, vertices, dmf_Vec3_vec_t, 0)
__flatbuffers_define_vector_field(3, dmf_Shape, normals, dmf_Vec3_vec_t, 0)
__flatbuffers_define_vector_field(4, dmf_Shape, texcoords, dmf_Vec2_vec_t, 0)

struct dmf_Model_table { uint8_t unused__; };

#ifndef dmf_Model_identifier
#define dmf_Model_identifier flatbuffers_identifier
#endif
#define dmf_Model_type_hash ((flatbuffers_thash_t)0x1bc0c0db)
#define dmf_Model_type_identifier "\xdb\xc0\xc0\x1b"
static inline size_t dmf_Model_vec_len(dmf_Model_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dmf_Model_table_t dmf_Model_vec_at(dmf_Model_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dmf_Model_table_t, vec, i, 0)
__flatbuffers_table_as_root(dmf_Model)

__flatbuffers_define_vector_field(0, dmf_Model, shapes, dmf_Shape_vec_t, 0)

#include "flatcc/portable/pdiagnostic_pop.h"
#endif /* DMF_READER_H */
